<div class="auth-container">
    <form id="register-form" class="auth-form">
        <h1> Sign Up</h1>
        <input class="text-input" id="register-username" type="text" name="Username" placeholder="Username">
        <input class="text-input" id="register-password" type="password" name="Password" placeholder="Password">
        <input class="text-input" id="register-confirm-password" type="password" name="Confirm Password"
            placeholder="Confirm Password">
        <span id="register-error" style="display: none; color: red; font-size: large;">Please check your input.</span>
        <input class="submit" type="submit" value="REGISTER">
    </form>

    <form id="login-form" class="auth-form">
        <h1>Log In</h1>
        <input class="text-input" id="login-username" class="grayBorder" type="text" name="Username"
            placeholder="Username">
        <input class="text-input" id="login-password" class="grayBorder" type="password" name="Password"
            placeholder="Password">
        <span id="login-error" style="display: none; color: red; font-size: large;">Please check your input.</span>
        <input class="submit" type="submit" value="LOGIN">
    </form>
</div>

<link rel="stylesheet" href="../stylesheets/authenticate.css">
<script src="https://unpkg.com/axios/dist/axios.min.js"></script>
<script>
    const registerForm = document.querySelector('#register-form');
    const registerUsername = document.querySelector('#register-username');
    const registerPassword = document.querySelector('#register-password');
    const registerConfirmPassword = document.querySelector('#register-confirm-password');
    const registerErrSpan = document.querySelector('#register-error');

    const loginForm = document.querySelector('#login-form');
    const loginUsername = document.querySelector('#login-username');
    const loginPassword = document.querySelector('#login-password');
    const loginErrSpan = document.querySelector('#login-error');

    const usernameRegExp = /(?=.{3,})/;
    const passwordRegExp = /(?=.{8,})/;

    const verifyLogin = (event) => {
        event.preventDefault();

        if (checkInputs([
            {
                regExp: usernameRegExp,
                input: loginUsername,
                confirmInput: loginUsername
            },
            {
                regExp: passwordRegExp,
                input: loginPassword,
                confirmInput: loginPassword
            }
        ], loginErrSpan)) return;

        axios.post('/login', {
            username: loginUsername.value,
            password: loginPassword.value
        })
            .then(response => {
                window.location.href = '/';
            })
            .catch(error => {
                console.log(error);
                alert('Incorrect username or password.');
            });
    };

    const verifyRegister = (event) => {
        event.preventDefault();

        if (checkInputs([
            {
                regExp: usernameRegExp,
                input: registerUsername,
                confirmInput: registerUsername
            },
            {
                regExp: passwordRegExp,
                input: registerPassword,
                confirmInput: registerConfirmPassword
            }
        ], registerErrSpan)) return;

        axios.post('/register', {
            username: registerUsername.value,
            password: registerPassword.value
        })
            .then(response => {
                window.location.href = '/authenticate';
            })
            .catch(error => {
                alert('Register failed');
                window.location.href = '/authenticate';
            });
    };

    const checkInputs = (arrayOfInputs, errSpan) => {
        let failed = false;
        arrayOfInputs.forEach((obj) => {
            if (!obj.regExp.test(obj.input.value) ||
                obj.confirmInput.value !== obj.input.value) {
                if (!obj.input.classList.contains('redBorder')) {
                    obj.input.classList.add('redBorder');
                }
                if (!obj.confirmInput.classList.contains('redBorder')) {
                    obj.confirmInput.classList.add('redBorder');
                }
                failed = true;
            } else {
                obj.input.classList.remove('redBorder');
                obj.confirmInput.classList.remove('redBorder');
            }
        });
        if (failed) {
            errSpan.style.display = 'flex';
        }
        return failed;
    };

    loginForm.addEventListener('submit', verifyLogin);
    registerForm.addEventListener('submit', verifyRegister);
</script>